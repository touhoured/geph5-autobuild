name: Build and Upload

on:
  push:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:

env:
  upstream: geph-official/geph5
  bin: geph5-client

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            dir: musl
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            dir: musl-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            dir: gnu
          - os: windows-latest
            target: i686-pc-windows-msvc
            dir: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            dir: macos

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
          submodules: "recursive"

      - name: Install musl-tools (Linux)
        if: ${{ matrix.dir == 'musl' }}
        run: sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install cross (only for arm64)
        if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}
        run: cargo install cross

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          prefix-key: "lele"

      - name: Build client
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            cross build --locked --release --target "${{ matrix.target }}" --manifest-path binaries/geph5-client/Cargo.toml
          elif [ "${{ matrix.target }}" = "i686-pc-windows-msvc" ]; then
            cargo build --locked --release --target "${{ matrix.target }}" --manifest-path binaries/geph5-client/Cargo.toml --all-features
          else
            cargo build --locked --release --target "${{ matrix.target }}" --manifest-path binaries/geph5-client/Cargo.toml
          fi

      - name: Move client binaries to artifacts directory
        shell: bash
        run: |
          mkdir -p artifacts/${{ matrix.dir }}
          mv target/${{ matrix.target }}/release/geph5-client* artifacts/${{ matrix.dir }}/

      - name: Install cargo-bundle
        if: matrix.os == 'macos-latest'
        run: cargo install cargo-bundle --locked --version "=0.6.0"  --force

      - name: Create macOS .app bundle
        if: matrix.os == 'macos-latest'
        run: |
          cd binaries/geph5-client-gui
          cargo bundle --release --target ${{ matrix.target }}

      - name: Create macOS .app zip
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.target }}/release/bundle/osx/
          zip -r "geph5-client-gui.app.zip" "Geph5.app"
          mv "geph5-client-gui.app.zip" ../../../../../artifacts/${{ matrix.dir }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.dir }}-latest
          path: artifacts/${{ matrix.dir }}

  build-bridge-exit:
    name: Build Bridge, Exit, and Broker (Musl)
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
          submodules: "recursive"

      - name: Install musl-tools
        run: sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - name: Set default host
        shell: bash
        run: rustup set default-host x86_64-unknown-linux-musl

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2
        with:
          key: x86_64-unknown-linux-musl-bridge-exit

      - name: Build bridge and exit and broker
        run: |
          cargo build --locked --release --target x86_64-unknown-linux-musl --manifest-path binaries/geph5-bridge/Cargo.toml
          cargo build --locked --release --target x86_64-unknown-linux-musl --manifest-path binaries/geph5-exit/Cargo.toml
          cargo build --locked --release --target x86_64-unknown-linux-musl --manifest-path binaries/geph5-broker/Cargo.toml

      - name: Move bridge and exit binaries to artifacts directory
        run: |
          mkdir -p artifacts/musl
          mv target/x86_64-unknown-linux-musl/release/geph5-bridge artifacts/musl/
          mv target/x86_64-unknown-linux-musl/release/geph5-broker artifacts/musl/
          mv target/x86_64-unknown-linux-musl/release/geph5-exit artifacts/musl/

      - name: Upload bridge and exit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: musl-latest-bridge
          path: artifacts/musl


  upload:
    if: github.ref == 'refs/heads/master'
    needs: [build, build-bridge-exit]
    runs-on: ubuntu-20.04

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move some stuff
        run: |
          mv artifacts/musl-latest-bridge/* artifacts/musl-latest/
          rmdir artifacts/musl-latest-bridge

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region = auto
          endpoint = https://b5e397a549f0e6543dba8e1d83ca9924.r2.cloudflarestorage.com
          acl = private
          EOF

      - name: Upload to Cloudflare R2
        run: |
          rclone copy -P ./artifacts/ r2:geph5/

  release:
    needs: [build, build-bridge-exit]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.upstream }}
          fetch-depth: 0
          submodules: "recursive"
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: build
      - name: Get environment variable
        run: |
          date=$(date -I)
          hash=$(git log --pretty=format:%H -n 1)
          short_hash=$(git log --pretty=format:%h -n 1)
          tag_name=$(git describe --tags --match geph5-client\*)
          echo "data=${date}" >> "${GITHUB_ENV}"
          echo "hash=${hash}" >> "${GITHUB_ENV}"
          echo "short_hash=${short_hash}" >> "${GITHUB_ENV}"
          echo "tag_name=${tag_name}" >> "${GITHUB_ENV}"
      - name: Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          gh release -R ${{ github.repository }} delete daily -y --cleanup-tag
          gh release -R ${{ github.repository }} create daily --generate-notes
          gh release -R ${{ github.repository }} create ${tag_name} --generate-notes --target ${short_hash} ||
          gh release -R ${{ github.repository }} create ${tag_name} --generate-notes
      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release -R ${{ github.repository }} upload ${tag_name} --clobber build/*
          gh release -R ${{ github.repository }} upload daily --clobber build/*

      - name: tamte
        if: failure()
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install tmate
          tmate -F
