name: CI

on:
  push:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      skip_build_windows:
        description: "Skip Build Windows"
        required: false
        default: false
        type: boolean
      skip_build_linux:
        description: "Skip Build Linux"
        required: false
        default: false
        type: boolean
      skip_release:
        description: "Skip Release"
        required: false
        default: false
        type: boolean
      reset_head:
        description: "Reset to Head"
        required: false
        type: string

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
          token: ${{ secrets.PAT }}

      - name: Sync
        run: |
          git remote add upstream https://github.com/geph-official/geph5.git
          git fetch upstream
          # git reset --hard $(git log --pretty=format:'%H' -n 1)
          git reset upstream/master
          git push -f
          git push --tags -f

  common:
    name: common
    needs: sync
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      date: ${{ steps.getenv.outputs.date }}
      hash: ${{ steps.getenv.outputs.hash }}
      short: ${{ steps.getenv.outputs.short_hash }}
      tag_name: ${{ steps.getenv.outputs.tag_name }}
      version: ${{ steps.getenv.outputs.version }}
    steps:
      - name: Checkout
        if: ${{ !inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: geph-official/geph5
          fetch-depth: 0
      - name: Checkout
        if: ${{ inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: geph-official/geph5
          fetch-depth: 0
          ref: ${{ inputs.reset_head }}
      - name: Reset to input HEAD
        if: inputs.reset_head != null
        run: git reset --hard ${{ inputs.reset_head }}
      - name: Get environment variable
        id: getenv
        shell: bash
        run: |
          echo date=$(date -I) | tee -a "${GITHUB_OUTPUT}" "${GITHUB_ENV}"
          echo hash=$(git log --pretty=format:%H -n 1) | tee -a "${GITHUB_OUTPUT}" "${GITHUB_ENV}"
          echo short_hash=$(git log --pretty=format:%h -n 1) | tee -a "${GITHUB_OUTPUT}" "${GITHUB_ENV}"
          echo tag_name=$(git describe --tags --abbrev=0 --match geph5-client\*) | tee -a "${GITHUB_OUTPUT}" "${GITHUB_ENV}"
          echo describe_name=$(git describe --tags --abbrev=0 --match geph5-client\*) | tee -a "${GITHUB_OUTPUT}" "${GITHUB_ENV}"
          echo version=$(git describe --tags --abbrev=0 --match geph5-client\* | cut -d - -f 3) | tee -a "${GITHUB_OUTPUT}" "${GITHUB_ENV}"
      - name: Delete daily
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: gh release -R ${{ github.repository }} delete daily --yes --cleanup-tag
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: gh release -R ${{ github.repository }} create ${tag_name} --generate-notes --target ${hash}
      - name: Create daily
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: gh release -R ${{ github.repository }} create daily --generate-notes --prerelease --target ${hash}


  build:
    name: Build Windows
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      hash: ${{ needs.common.outputs.hash }}
      short: ${{ needs.common.outputs.short }}
      tag_name: ${{ needs.common.outputs.tag_name }}
      version: ${{ needs.common.outputs.version }}
    if: inputs.skip_build_windows != true
    needs: common
    strategy:
      matrix:
        include:
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
    steps:
      - name: Checkout
        if: ${{ !inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: geph-official/geph5
      - name: Checkout
        if: ${{ inputs.reset_head }}
        uses: actions/checkout@v3
        with:
          repository: geph-official/geph5
          ref: ${{ inputs.reset_head }}

      - name: Use 64-bit WinDivert
        if: matrix.target == 'x86_64-pc-windows-msvc'
        shell: bash
        working-directory: binaries/geph5-client
        run: |
          curl -OL https://github.com/basil00/Divert/releases/download/v2.2.2/WinDivert-2.2.2-A.zip
          rm windows-lib/*
          unzip WinDivert-2.2.2-A.zip
          cp WinDivert-2.2.2-A/x64/* windows-lib/

      - name: Install Cross
        run: cargo install cross
      - name: Build binary
        shell: bash
        run: cross build --target ${{ matrix.target }} --manifest-path binaries/geph5-client/Cargo.toml --all-features
      - name: Build release binary
        if: ${{ !inputs.reset_head }}
        shell: bash
        run: |
          git reset --hard ${{ env.tag_name }}
          cross build --locked --release --target ${{ matrix.target }} --manifest-path binaries/geph5-client/Cargo.toml --all-features

      - name: Package
        if: matrix.os == 'windows-latest'
        working-directory: target/${{ matrix.target }}/debug/
        run: 7z a geph5-client-${{ matrix.target }}-${{ env.short }}.zip geph5-client.exe

      - name: Package
        if: ${{ matrix.os == 'windows-latest' && !inputs.reset_head }}
        working-directory: target/${{ matrix.target }}/release/
        run: 7z a geph5-client-${{ matrix.target }}-${{ env.version }}.zip geph5-client.exe

      - name: Package debug
        if: matrix.os == 'ubuntu-latest'
        working-directory: target/${{ matrix.target }}/debug/
        run: tar -xavf geph5-client-${{ matrix.target }}-${{ env.short }}.tar.gz geph5-client

      - name: Package release
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.reset_head }}
        working-directory: target/${{ matrix.target }}/release/
        run: 7z -xavf geph5-client-${{ matrix.target }}-${{ env.version }}.tar.gz geph5-client

      - uses: actions/upload-artifact@v4
        with:
          name: geph5-client-${{ matrix.target }}
          path: target/${{ matrix.target }}/*/geph5-client*

      - name: Release
        if: ${{ !inputs.reset_head }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release -R ${{ github.repository }} upload daily --clobber target/${{ matrix.target }}/debug/geph5-client-${{ matrix.target }}-*
          gh release -R ${{ github.repository }} upload ${{ env.tag_name }} --clobber target/${{ matrix.target }}/release/geph5-client-${{ matrix.target }}-*
